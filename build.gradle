buildscript {
	ext {
		sqlClientVersion = '8.0.31'
		snakeyamlVersion = '1.32'
		flywayVersion = '9.22.0'
		springBootVersion = '3.2.5'
		springKafkaVersion = '3.2.1'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "mysql:mysql-connector-java:${sqlClientVersion}"
		classpath 'org.owasp:dependency-check-gradle:5.2.1'
		classpath 'gradle.plugin.net.foragerr.jmeter:jmeter-gradle-plugin:1.1.0-4.0'
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "checkstyle"
	id "jacoco"
	id "org.flywaydb.flyway" version "${flywayVersion}"
	id "eclipse"
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "org.sonarqube" version "4.0.0.2929"
	id "net.foragerr.jmeter" version "1.1.0-4.0"
	id "java-library"
}

apply plugin: "org.sonarqube"

allprojects {
	apply plugin: 'java'
	group = 'com.digicert.individualvalidation'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = 17
	targetCompatibility = 17

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.dev.blu.digicert.com/repository/maven-public/" }
	}
}

ext {
	snippetsDir = file('build/generated-snippets')
}

compileJava {
	finalizedBy processResources
}

processResources {
	onlyIf { true }

	from ("${rootProject.projectDir}/migrations/dev") {
		into 'db/migration'
	}
}


subprojects {
	apply plugin: 'java-library'
	apply plugin: 'jacoco'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	jacocoTestReport {

		reports {
			html.required = true
			xml.required = true
		}
		// Only generate JaCoCo reports if tests were executed successfully
		onlyIf {  test.state.executed && !test.state.failure }
	}

// Ensure that jacocoTestReport task runs after the build task
	build.finalizedBy jacocoTestReport

	sonarqube {
		properties {
			property 'sonar.sourceEncoding', 'UTF-8'
			property "sonar.projectKey", "sundance-api"
			property "sonar.projectName", "sundance-api"
			property 'sonar.language', 'java'
			property "sonar.github.repository", "digicert/sundance-api"
			property "sonar.coverage.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
			property "sonar.coverage.exclusions", ""
		}
	}

	jacocoTestCoverageVerification {
		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it, excludes: [])
			}))
		}
		violationRules {
			rule {
				limit {
					counter = 'INSTRUCTION'
					value = 'COVEREDRATIO'
					minimum = 0.05
				}
			}
		}
	}


	test {
		useJUnitPlatform()
		reports {
			junitXml.required = true
			html.required = false
		}

		jacoco {
			excludes += []
		}

		outputs.upToDateWhen { false }
		finalizedBy jacocoTestReport
	}

	tasks.withType(JavaCompile) {
		options.compilerArgs << "-parameters"
	}

	task copyDependencies(type: Copy) {
		duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.EXCLUDE
		from configurations.runtimeClasspath
		into "$buildDir/libs/lib"
	}

	dependencies {
		annotationProcessor 'org.projectlombok:lombok:1.18.32'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
		implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
		implementation 'com.github.jknack:handlebars:4.3.1'
		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		implementation 'org.mapstruct:mapstruct:1.5.5.Final'
		implementation 'org.projectlombok:lombok:1.18.32'
		implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		implementation "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
		implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
		implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
		implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
		implementation 'io.github.resilience4j:resilience4j-spring-boot2:2.1.0'
		implementation "org.springframework.kafka:spring-kafka:${springKafkaVersion}"
		implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.15.0'
		implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.15.0'
		implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
		implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
		implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.15.0'
		implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.15.0'
		implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.15.0'
		implementation 'org.glassfish.jersey.core:jersey-server:2.31'
		implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
		implementation 'org.springframework.cloud:spring-cloud-context:3.1.1'
		implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		implementation 'org.apache.httpcomponents:httpclient:4.5.13'
		implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
		implementation 'org.apache.pdfbox:pdfbox:2.0.27'
		implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.20.0'
		implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
		implementation 'org.apache.commons:commons-collections4:4.3'
		implementation 'io.split.client:java-client:4.7.0'
		implementation 'com.github.jknack:handlebars:4.3.1'
		implementation 'org.owasp.encoder:encoder:1.2.2'
		implementation 'com.lowagie:itext:2.1.7'
		implementation 'javax.xml.bind:jaxb-api:2.3.1'
		implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
		implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'
		implementation "org.springframework.boot:spring-boot-starter-websocket:${springBootVersion}"
		implementation 'org.webjars:sockjs-client:1.0.2'
		implementation 'org.webjars:webjars-locator-core:0.44'


		testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
		testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.6.RELEASE'
		testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient:2.0.6.RELEASE'
		testImplementation 'junit:junit:4.13.1'
		testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
		testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
		testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testImplementation "org.springframework.security:spring-security-test:6.2.3"
		testImplementation 'org.mockito:mockito-core:3.6.0'
		testImplementation 'org.mockito:mockito-junit-jupiter:3.6.0'
		testImplementation 'org.mockito:mockito-inline:3.6.0'
		testImplementation 'org.assertj:assertj-core:3.24.2'
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testImplementation 'org.apache.kafka:kafka-clients:2.8.0'
		testImplementation 'org.testcontainers:testcontainers:1.19.4'
		testImplementation 'org.testcontainers:mariadb:1.19.4'
	}

	check.dependsOn jacocoTestCoverageVerification
}



springBoot {
	mainClass = 'com.digicert.consent.ConsentApiApplication'
}